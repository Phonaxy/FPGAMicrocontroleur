library ieee;
use ieee.std_logic_1164.all;

-- Déclaration de l'entité du testbench
entity tb_registre_universel is
end tb_registre_universel;

architecture Behavioral of tb_registre_universel is

    -- Déclaration des signaux de test
    signal SSR_tb    : std_logic := '0';
    signal SSL_tb    : std_logic := '0';
    signal Pi_tb     : std_logic_vector(7 downto 0) := "00000000";
    signal SEL_tb    : std_logic_vector(2 downto 0) := "000";
    signal CLK_tb    : std_logic := '0';
    signal SETn_tb   : std_logic := '1';
    signal RSTn_tb   : std_logic := '1';
    signal SOR_tb    : std_logic;
    signal SOL_tb    : std_logic;
    signal Qo_tb     : std_logic_vector(7 downto 0);

    constant clk_period : time := 10 ns;

begin

    -- Instanciation du composant registre_universel
    uut: entity work.registre_universel
        port map (
            SSR   => SSR_tb,
            SSL   => SSL_tb,
            Pi    => Pi_tb,
            SEL   => SEL_tb,
            CLK   => CLK_tb,
            SETn  => SETn_tb,
            RSTn  => RSTn_tb,
            SOR   => SOR_tb,
            SOL   => SOL_tb,
            Qo    => Qo_tb
        );

    -- Génération de l'horloge
    clk_process : process
    begin
        while true loop
            CLK_tb <= '0';
            wait for clk_period/2;
            CLK_tb <= '1';
            wait for clk_period/2;
        end loop;
    end process;

    -- Application des stimuli
    stim_proc: process
    begin
        -- Test de réinitialisation (Reset)
        RSTn_tb <= '0';
        wait for clk_period;
        RSTn_tb <= '1';

        -- Test de préréglage (Set)
        SETn_tb <= '0';
        wait for clk_period;
        SETn_tb <= '1';

        -- Test de chargement parallèle
        Pi_tb <= "10101010";  -- Entrée parallèle
        SEL_tb <= "011";      -- Mode Parallel load
        wait for clk_period;

        -- Test de décalage à droite
        SEL_tb <= "001";      -- Mode Shift right
        SSR_tb <= '1';        -- Entrée série
        wait for clk_period;

        -- Test de décalage à gauche
        SEL_tb <= "010";      -- Mode Shift left
        SSL_tb <= '1';        -- Entrée série
        wait for clk_period;

        -- Test de rotation à droite
        SEL_tb <= "101";      -- Mode Rotate right
        SSR_tb <= '1';        -- Entrée série
        wait for clk_period;

        -- Test de rotation à gauche
        SEL_tb <= "110";      -- Mode Rotate left
        SSL_tb <= '1';        -- Entrée série
        wait for clk_period;

        -- Fin de simulation
        wait;
    end process;

end Behavioral;
